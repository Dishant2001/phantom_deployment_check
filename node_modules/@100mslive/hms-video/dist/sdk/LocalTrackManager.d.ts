import { HMSAudioTrackSettings, HMSTrackSettings, HMSVideoTrackSettings } from '../media/settings';
import InitialSettings from '../interfaces/settings';
import { HMSLocalTrack } from '../media/tracks';
import { IStore } from './store';
import { IFetchAVTrackOptions } from '../transport/ITransport';
import ITransportObserver from '../transport/ITransportObserver';
import HMSLocalStream from '../media/streams/HMSLocalStream';
import { DeviceManager } from '../device-manager';
import { EventBus } from '../events/EventBus';
import { AnalyticsTimer } from '../analytics/AnalyticsTimer';
export declare class LocalTrackManager {
    private store;
    private observer;
    private deviceManager;
    private eventBus;
    private analyticsTimer;
    readonly TAG: string;
    constructor(store: IStore, observer: ITransportObserver, deviceManager: DeviceManager, eventBus: EventBus, analyticsTimer: AnalyticsTimer);
    getTracksToPublish(initialSettings: InitialSettings): Promise<HMSLocalTrack[]>;
    /**
     * @throws {HMSException}
     */
    getLocalTracks(fetchTrackOptions: IFetchAVTrackOptions | undefined, settings: HMSTrackSettings, localStream?: HMSLocalStream): Promise<Array<HMSLocalTrack>>;
    /**
     * @throws {HMSException}
     */
    private getNativeLocalTracks;
    getLocalScreen(videosettings: HMSVideoTrackSettings, audioSettings?: HMSAudioTrackSettings): Promise<HMSLocalTrack[]>;
    requestPermissions(): Promise<void>;
    static getEmptyVideoTrack(prevTrack?: MediaStreamTrack): MediaStreamTrack;
    static getEmptyAudioTrack(): MediaStreamTrack;
    /**
     * @throws {HMSException}
     */
    private getAVTracks;
    private getTrackSettings;
    private retryGetLocalTracks;
    private getErrorType;
    private getEmptyTracks;
    private updateCurrentLocalTrackSettings;
    private getAudioSettings;
    private getVideoSettings;
    private getScreenSettings;
    private createHMSLocalTracks;
}
