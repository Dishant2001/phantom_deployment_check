import { IHMSNotifications, HMSNotificationCallback } from '../IHMSNotifications';
import { IHMSStore } from '../IHMSStore';
import * as sdkTypes from './sdkTypes';
import { HMSNotificationTypes, HMSPeer, HMSException, HMSMessage, HMSTrackID, HMSChangeTrackStateRequest, HMSChangeMultiTrackStateRequest, HMSLeaveRoomRequest, HMSDeviceChangeEvent, HMSPlaylistItem } from '../schema';
export declare class HMSNotifications implements IHMSNotifications {
    private id;
    private eventEmitter;
    private store;
    constructor(store: IHMSStore);
    onNotification: (cb: HMSNotificationCallback, type?: HMSNotificationTypes | HMSNotificationTypes[] | undefined) => () => void;
    sendPlaylistTrackEnded<T>(item: HMSPlaylistItem<T>): void;
    sendDeviceChange(request: HMSDeviceChangeEvent): void;
    sendLeaveRoom(request: HMSLeaveRoomRequest): void;
    sendPeerList(peers: HMSPeer[]): void;
    sendPeerUpdate(type: sdkTypes.HMSPeerUpdate, peer: HMSPeer | null): void;
    sendTrackUpdate(type: sdkTypes.HMSTrackUpdate, trackID: HMSTrackID): void;
    sendMessageReceived(message: HMSMessage): void;
    sendError(error: HMSException): void;
    sendReconnecting(error: HMSException): void;
    sendReconnected(): void;
    sendChangeTrackStateRequest(request: HMSChangeTrackStateRequest): void;
    sendChangeMultiTrackStateRequest(request: HMSChangeMultiTrackStateRequest): void;
    private emitEvent;
    private createNotification;
}
